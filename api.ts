/* tslint:disable */
/* eslint-disable */
/**
 * Volcani Agent Server
 * Agentic API Server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * A block with type and content.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * Type of the block
     * @type {string}
     * @memberof Block
     */
    'type': string;
    /**
     * Content data for the block
     * @type {any}
     * @memberof Block
     */
    'content': any;
}
/**
 * Schema definition for a block type.
 * @export
 * @interface BlockSchema
 */
export interface BlockSchema {
    /**
     * Name of the block
     * @type {string}
     * @memberof BlockSchema
     */
    'name': string;
    /**
     * Block type identifier
     * @type {string}
     * @memberof BlockSchema
     */
    'type': string;
    /**
     * Description of what the block does
     * @type {string}
     * @memberof BlockSchema
     */
    'description': string;
    /**
     * JSON Schema for expected data to render the block
     * @type {{ [key: string]: any; }}
     * @memberof BlockSchema
     */
    'data_schema': { [key: string]: any; };
}
/**
 * A single chat message in the conversation history.
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * Unique message identifier
     * @type {string}
     * @memberof ChatMessage
     */
    'message_id': string;
    /**
     * Session identifier
     * @type {string}
     * @memberof ChatMessage
     */
    'session_id': string;
    /**
     * When the message was sent
     * @type {string}
     * @memberof ChatMessage
     */
    'timestamp': string;
    /**
     * Role: \'user\', \'assistant\', or \'tool_call\'
     * @type {string}
     * @memberof ChatMessage
     */
    'role': string;
    /**
     * Message content
     * @type {string}
     * @memberof ChatMessage
     */
    'content': string;
    /**
     * 
     * @type {Array<Block>}
     * @memberof ChatMessage
     */
    'blocks'?: Array<Block> | null;
    /**
     * Additional message metadata
     * @type {{ [key: string]: any; }}
     * @memberof ChatMessage
     */
    'metadata'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'tool_name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ChatMessage
     */
    'tool_args'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'tool_result'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatMessage
     */
    'tool_error'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Request model for agent invocation.
 * @export
 * @interface InvokeRequest
 */
export interface InvokeRequest {
    /**
     * Natural language query
     * @type {string}
     * @memberof InvokeRequest
     */
    'query': string;
    /**
     * 
     * @type {string}
     * @memberof InvokeRequest
     */
    'session_id'?: string | null;
    /**
     * 
     * @type {Array<BlockSchema>}
     * @memberof InvokeRequest
     */
    'client_capabilities'?: Array<BlockSchema> | null;
}
/**
 * Response model for agent invocation.
 * @export
 * @interface InvokeResponse
 */
export interface InvokeResponse {
    /**
     * Session identifier
     * @type {string}
     * @memberof InvokeResponse
     */
    'session_id': string;
    /**
     * List of blocks with type and content
     * @type {Array<Block>}
     * @memberof InvokeResponse
     */
    'blocks': Array<Block>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof InvokeResponse
     */
    'user_context'?: { [key: string]: any; } | null;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * Response model for session messages.
 * @export
 * @interface SessionMessagesResponse
 */
export interface SessionMessagesResponse {
    /**
     * Session identifier
     * @type {string}
     * @memberof SessionMessagesResponse
     */
    'session_id': string;
    /**
     * User identifier
     * @type {string}
     * @memberof SessionMessagesResponse
     */
    'user_id': string;
    /**
     * List of messages in the session
     * @type {Array<ChatMessage>}
     * @memberof SessionMessagesResponse
     */
    'messages': Array<ChatMessage>;
    /**
     * Total number of messages in the session
     * @type {number}
     * @memberof SessionMessagesResponse
     */
    'total_messages': number;
    /**
     * Always False - no pagination
     * @type {boolean}
     * @memberof SessionMessagesResponse
     */
    'has_more': boolean;
    /**
     * Total message count only
     * @type {{ [key: string]: any; }}
     * @memberof SessionMessagesResponse
     */
    'pagination': { [key: string]: any; };
}
/**
 * Session data for sidebar display.
 * @export
 * @interface SidebarSession
 */
export interface SidebarSession {
    /**
     * Session identifier
     * @type {string}
     * @memberof SidebarSession
     */
    'session_id': string;
    /**
     * Session name (generated from first message)
     * @type {string}
     * @memberof SidebarSession
     */
    'name': string;
    /**
     * User identifier
     * @type {string}
     * @memberof SidebarSession
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof SidebarSession
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SidebarSession
     */
    'updated_at'?: string | null;
    /**
     * Number of messages in the session
     * @type {number}
     * @memberof SidebarSession
     */
    'message_count': number;
    /**
     * Preview of the last message
     * @type {string}
     * @memberof SidebarSession
     */
    'last_message_preview': string;
}
/**
 * Response model for sidebar sessions.
 * @export
 * @interface SidebarSessionsResponse
 */
export interface SidebarSessionsResponse {
    /**
     * User identifier
     * @type {string}
     * @memberof SidebarSessionsResponse
     */
    'user_id': string;
    /**
     * List of sessions for sidebar
     * @type {Array<SidebarSession>}
     * @memberof SidebarSessionsResponse
     */
    'sessions': Array<SidebarSession>;
    /**
     * Total number of sessions available
     * @type {number}
     * @memberof SidebarSessionsResponse
     */
    'total_sessions': number;
    /**
     * Whether there are more sessions available
     * @type {boolean}
     * @memberof SidebarSessionsResponse
     */
    'has_more': boolean;
    /**
     * Pagination information
     * @type {{ [key: string]: any; }}
     * @memberof SidebarSessionsResponse
     */
    'pagination': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Serve favicon.ico to prevent 404 errors.
         * @summary Get Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaviconFaviconIcoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/favicon.ico`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionMessagesApiSessionsSessionIdMessagesGet: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionMessagesApiSessionsSessionIdMessagesGet', 'sessionId', sessionId)
            const localVarPath = `/api/sessions/{session_id}/messages`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSessionsApiSessionsGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeAgentInvokePost: async (invokeRequest: InvokeRequest, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invokeRequest' is not null or undefined
            assertParamExists('invokeAgentInvokePost', 'invokeRequest', invokeRequest)
            const localVarPath = `/invoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (accept != null) {
                localVarHeaderParameter['accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Health check endpoint for Cloud Run.
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Serve the main Volcani chat interface.
         * @summary Serve Ui
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serveUiUiGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ui`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Serve favicon.ico to prevent 404 errors.
         * @summary Get Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaviconFaviconIcoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaviconFaviconIcoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getFaviconFaviconIcoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSessionMessagesApiSessionsSessionIdMessagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStatusStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SidebarSessionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSessionsApiSessionsGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserSessionsApiSessionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeAgentInvokePost(invokeRequest, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeAgentInvokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Health check endpoint for Cloud Run.
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Serve the main Volcani chat interface.
         * @summary Serve Ui
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serveUiUiGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serveUiUiGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.serveUiUiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Serve favicon.ico to prevent 404 errors.
         * @summary Get Favicon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaviconFaviconIcoGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getFaviconFaviconIcoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<SessionMessagesResponse> {
            return localVarFp.getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getStatusStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SidebarSessionsResponse> {
            return localVarFp.getUserSessionsApiSessionsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<InvokeResponse> {
            return localVarFp.invokeAgentInvokePost(invokeRequest, accept, options).then((request) => request(axios, basePath));
        },
        /**
         * Health check endpoint for Cloud Run.
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Serve the main Volcani chat interface.
         * @summary Serve Ui
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serveUiUiGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.serveUiUiGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Serve favicon.ico to prevent 404 errors.
     * @summary Get Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFaviconFaviconIcoGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFaviconFaviconIcoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatusStatusGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatusStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserSessionsApiSessionsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest 
     * @param {string} [accept] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeAgentInvokePost(invokeRequest, accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Health check endpoint for Cloud Run.
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Serve the main Volcani chat interface.
     * @summary Serve Ui
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public serveUiUiGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).serveUiUiGet(options).then((request) => request(this.axios, this.basePath));
    }
}



