/* tslint:disable */
/* eslint-disable */
/**
 * Volcani Agent Server
 * Agentic API Server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionMessagesApiSessionsSessionIdMessagesGet: (sessionId_1, ...args_1) => __awaiter(this, [sessionId_1, ...args_1], void 0, function* (sessionId, options = {}) {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionMessagesApiSessionsSessionIdMessagesGet', 'sessionId', sessionId);
            const localVarPath = `/api/sessions/{session_id}/messages`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get suggestions for a specific session.
         * @summary Get Session Suggestions
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionSuggestionsApiSessionsSessionIdSuggestionsGet: (sessionId_1, ...args_1) => __awaiter(this, [sessionId_1, ...args_1], void 0, function* (sessionId, options = {}) {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSessionSuggestionsApiSessionsSessionIdSuggestionsGet', 'sessionId', sessionId);
            const localVarPath = `/api/sessions/{session_id}/suggestions`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusStatusGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSessionsApiSessionsGet: (limit_1, offset_1, ...args_1) => __awaiter(this, [limit_1, offset_1, ...args_1], void 0, function* (limit, offset, options = {}) {
            const localVarPath = `/api/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest
         * @param {string} [accept]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeAgentInvokePost: (invokeRequest_1, accept_1, ...args_1) => __awaiter(this, [invokeRequest_1, accept_1, ...args_1], void 0, function* (invokeRequest, accept, options = {}) {
            // verify required parameter 'invokeRequest' is not null or undefined
            assertParamExists('invokeAgentInvokePost', 'invokeRequest', invokeRequest);
            const localVarPath = `/invoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (accept != null) {
                localVarHeaderParameter['accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
    return {
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.getSessionMessagesApiSessionsSessionIdMessagesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get suggestions for a specific session.
         * @summary Get Session Suggestions
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.getSessionSuggestionsApiSessionsSessionIdSuggestionsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusStatusGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStatusStatusGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.getStatusStatusGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSessionsApiSessionsGet(limit, offset, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserSessionsApiSessionsGet(limit, offset, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.getUserSessionsApiSessionsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.healthCheckHealthGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.healthCheckHealthGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest
         * @param {string} [accept]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeAgentInvokePost(invokeRequest, accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.invokeAgentInvokePost(invokeRequest, accept, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DefaultApi.invokeAgentInvokePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DefaultApiFp(configuration);
    return {
        /**
         * Get all messages for a specific session.
         * @summary Get Session Messages
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options) {
            return localVarFp.getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get suggestions for a specific session.
         * @summary Get Session Suggestions
         * @param {string} sessionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options) {
            return localVarFp.getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current status of the agent.
         * @summary Get Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusStatusGet(options) {
            return localVarFp.getStatusStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get sessions for sidebar with names and message counts.
         * @summary Get User Sessions
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSessionsApiSessionsGet(limit, offset, options) {
            return localVarFp.getUserSessionsApiSessionsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Health check endpoint that doesn\'t require authentication.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options) {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Invoke the deployed agent with a natural language query.
         * @summary Invoke Agent
         * @param {InvokeRequest} invokeRequest
         * @param {string} [accept]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeAgentInvokePost(invokeRequest, accept, options) {
            return localVarFp.invokeAgentInvokePost(invokeRequest, accept, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options) {
        return DefaultApiFp(this.configuration).getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get suggestions for a specific session.
     * @summary Get Session Suggestions
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options) {
        return DefaultApiFp(this.configuration).getSessionSuggestionsApiSessionsSessionIdSuggestionsGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStatusStatusGet(options) {
        return DefaultApiFp(this.configuration).getStatusStatusGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUserSessionsApiSessionsGet(limit, offset, options) {
        return DefaultApiFp(this.configuration).getUserSessionsApiSessionsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    healthCheckHealthGet(options) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest
     * @param {string} [accept]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeAgentInvokePost(invokeRequest, accept, options) {
        return DefaultApiFp(this.configuration).invokeAgentInvokePost(invokeRequest, accept, options).then((request) => request(this.axios, this.basePath));
    }
}
