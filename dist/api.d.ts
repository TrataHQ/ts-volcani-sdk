/**
 * Volcani Agent Server
 * Agentic API Server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * Arguments for the tool call
 * @export
 * @interface Args
 */
export interface Args {
}
/**
 * A block with type and content.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * Unique identifier for the block
     * @type {string}
     * @memberof Block
     */
    'id': string;
    /**
     * Type of the block (markdown, component, tool_call_request, tool_call_response, etc.)
     * @type {string}
     * @memberof Block
     */
    'type': string;
    /**
     *
     * @type {Content}
     * @memberof Block
     */
    'content': Content | null;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof Block
     */
    'metadata'?: {
        [key: string]: any;
    } | null;
}
/**
 * Schema definition for a block type.
 * @export
 * @interface BlockSchema
 */
export interface BlockSchema {
    /**
     * Name of the block
     * @type {string}
     * @memberof BlockSchema
     */
    'name': string;
    /**
     * Block type identifier
     * @type {string}
     * @memberof BlockSchema
     */
    'type': string;
    /**
     * Description of what the block does
     * @type {string}
     * @memberof BlockSchema
     */
    'description': string;
    /**
     * JSON Schema for expected data to render the block
     * @type {{ [key: string]: any; }}
     * @memberof BlockSchema
     */
    'data_schema': {
        [key: string]: any;
    };
}
/**
 * A single chat message in the conversation history.
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * Unique message identifier
     * @type {string}
     * @memberof ChatMessage
     */
    'message_id': string;
    /**
     * Session identifier
     * @type {string}
     * @memberof ChatMessage
     */
    'session_id': string;
    /**
     * When the message was sent
     * @type {string}
     * @memberof ChatMessage
     */
    'timestamp': string;
    /**
     * Role: \'user\', \'assistant\', or \'system\'
     * @type {string}
     * @memberof ChatMessage
     */
    'role': string;
    /**
     *
     * @type {Array<Block>}
     * @memberof ChatMessage
     */
    'blocks'?: Array<Block> | null;
    /**
     * Additional message metadata
     * @type {{ [key: string]: any; }}
     * @memberof ChatMessage
     */
    'metadata'?: {
        [key: string]: any;
    };
}
/**
 * Response model for session messages.
 * @export
 * @interface ChatMessagesResponse
 */
export interface ChatMessagesResponse {
    /**
     * Session identifier
     * @type {string}
     * @memberof ChatMessagesResponse
     */
    'session_id': string;
    /**
     * User identifier
     * @type {string}
     * @memberof ChatMessagesResponse
     */
    'user_id': string;
    /**
     * List of messages in the session
     * @type {Array<ChatMessage>}
     * @memberof ChatMessagesResponse
     */
    'messages': Array<ChatMessage>;
    /**
     * Total number of messages in the session
     * @type {number}
     * @memberof ChatMessagesResponse
     */
    'total_messages': number;
    /**
     * Always False - no pagination
     * @type {boolean}
     * @memberof ChatMessagesResponse
     */
    'has_more': boolean;
    /**
     * Total message count only
     * @type {{ [key: string]: any; }}
     * @memberof ChatMessagesResponse
     */
    'pagination': {
        [key: string]: any;
    };
}
/**
 * Session data for sidebar display.
 * @export
 * @interface ChatSession
 */
export interface ChatSession {
    /**
     * Session identifier
     * @type {string}
     * @memberof ChatSession
     */
    'session_id': string;
    /**
     * Session name (generated from first message)
     * @type {string}
     * @memberof ChatSession
     */
    'name': string;
    /**
     * User identifier
     * @type {string}
     * @memberof ChatSession
     */
    'user_id': string;
    /**
     *
     * @type {string}
     * @memberof ChatSession
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ChatSession
     */
    'updated_at'?: string | null;
    /**
     * Number of messages in the session
     * @type {number}
     * @memberof ChatSession
     */
    'message_count': number;
    /**
     * Preview of the last message
     * @type {string}
     * @memberof ChatSession
     */
    'last_message_preview': string;
}
/**
 * Response model for sidebar sessions.
 * @export
 * @interface ChatSessionResponse
 */
export interface ChatSessionResponse {
    /**
     * User identifier
     * @type {string}
     * @memberof ChatSessionResponse
     */
    'user_id': string;
    /**
     * List of sessions for sidebar
     * @type {Array<ChatSession>}
     * @memberof ChatSessionResponse
     */
    'sessions': Array<ChatSession>;
    /**
     * Total number of sessions available
     * @type {number}
     * @memberof ChatSessionResponse
     */
    'total_sessions': number;
    /**
     * Whether there are more sessions available
     * @type {boolean}
     * @memberof ChatSessionResponse
     */
    'has_more': boolean;
    /**
     * Pagination information
     * @type {{ [key: string]: any; }}
     * @memberof ChatSessionResponse
     */
    'pagination': {
        [key: string]: any;
    };
}
/**
 * Content data for the block
 * @export
 * @interface Content
 */
export interface Content {
    /**
     * ID of the tool call
     * @type {string}
     * @memberof Content
     */
    'tool_call_id': string;
    /**
     * Name of the tool call
     * @type {string}
     * @memberof Content
     */
    'name': string;
    /**
     *
     * @type {Args}
     * @memberof Content
     */
    'args'?: Args;
    /**
     * Result content of the tool call
     * @type {string}
     * @memberof Content
     */
    'result_content': string;
    /**
     * Whether the tool call failed
     * @type {boolean}
     * @memberof Content
     */
    'is_tool_call_error': boolean;
    /**
     * Time taken to call the tool
     * @type {number}
     * @memberof Content
     */
    'total_response_time': number;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Request model for agent invocation.
 * @export
 * @interface InvokeRequest
 */
export interface InvokeRequest {
    /**
     * Natural language query
     * @type {string}
     * @memberof InvokeRequest
     */
    'query': string;
    /**
     *
     * @type {string}
     * @memberof InvokeRequest
     */
    'session_id'?: string | null;
    /**
     *
     * @type {Array<BlockSchema>}
     * @memberof InvokeRequest
     */
    'client_capabilities'?: Array<BlockSchema> | null;
}
/**
 * Response model for agent invocation.
 * @export
 * @interface InvokeResponse
 */
export interface InvokeResponse {
    /**
     * Session identifier
     * @type {string}
     * @memberof InvokeResponse
     */
    'session_id': string;
    /**
     * List of blocks with type and content
     * @type {Array<Block>}
     * @memberof InvokeResponse
     */
    'blocks': Array<Block>;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof InvokeResponse
     */
    'user_context'?: {
        [key: string]: any;
    } | null;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 *
 * @export
 * @interface ToolCallRequestContent
 */
export interface ToolCallRequestContent {
    /**
     * ID of the tool call
     * @type {string}
     * @memberof ToolCallRequestContent
     */
    'tool_call_id': string;
    /**
     * Name of the tool call
     * @type {string}
     * @memberof ToolCallRequestContent
     */
    'name': string;
    /**
     *
     * @type {Args}
     * @memberof ToolCallRequestContent
     */
    'args'?: Args;
}
/**
 *
 * @export
 * @interface ToolCallResponseContent
 */
export interface ToolCallResponseContent {
    /**
     * ID of the tool call
     * @type {string}
     * @memberof ToolCallResponseContent
     */
    'tool_call_id': string;
    /**
     * Name of the tool call
     * @type {string}
     * @memberof ToolCallResponseContent
     */
    'name': string;
    /**
     * Result content of the tool call
     * @type {string}
     * @memberof ToolCallResponseContent
     */
    'result_content': string;
    /**
     * Whether the tool call failed
     * @type {boolean}
     * @memberof ToolCallResponseContent
     */
    'is_tool_call_error': boolean;
    /**
     * Time taken to call the tool
     * @type {number}
     * @memberof ToolCallResponseContent
     */
    'total_response_time': number;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionMessagesApiSessionsSessionIdMessagesGet: (sessionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusStatusGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSessionsApiSessionsGet: (limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckHealthGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest
     * @param {string} [accept]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeAgentInvokePost: (invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatMessagesResponse>>;
    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatSessionResponse>>;
    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest
     * @param {string} [accept]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig): AxiosPromise<ChatMessagesResponse>;
    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStatusStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ChatSessionResponse>;
    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest
     * @param {string} [accept]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig): AxiosPromise<InvokeResponse>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Get all messages for a specific session.
     * @summary Get Session Messages
     * @param {string} sessionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getSessionMessagesApiSessionsSessionIdMessagesGet(sessionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatMessagesResponse, any>>;
    /**
     * Get the current status of the agent.
     * @summary Get Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getStatusStatusGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get sessions for sidebar with names and message counts.
     * @summary Get User Sessions
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUserSessionsApiSessionsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatSessionResponse, any>>;
    /**
     * Health check endpoint that doesn\'t require authentication.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Invoke the deployed agent with a natural language query.
     * @summary Invoke Agent
     * @param {InvokeRequest} invokeRequest
     * @param {string} [accept]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeAgentInvokePost(invokeRequest: InvokeRequest, accept?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InvokeResponse, any>>;
}
